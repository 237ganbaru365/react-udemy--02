{"ast":null,"code":"var _jsxFileName = \"/Users/fumina/Documents/project/practice/react-udemy__02/redux-refresshers/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Cart from \"./components/Cart/Cart\";\nimport Layout from \"./components/Layout/Layout\";\nimport Products from \"./components/Shop/Products\";\nimport { uiActions } from \"./store/ui\";\nimport Notification from \"./components/UI/Notification\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const isOpenCart = useSelector(state => state.ui.isOpenCart);\n  const cart = useSelector(state => state.cart);\n  const notification = useSelector(state => state.ui.notification); //every time app component render, the initial value will store the database, that would be problem because empty data will update all exsiting data every single time when app component render, so we need fix it\n\n  useEffect(() => {\n    const sendCartData = async () => {\n      dispatch(uiActions.showNotificartion({\n        status: \"pending\",\n        title: \"Sending...\",\n        message: \"Sending cart data\"\n      }));\n      const response = await fetch(\"https://react-http-3be24-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n\n      dispatch(uiActions.showNotificartion({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sending cart data successfully!\"\n      }));\n    };\n\n    sendCartData().catch(error => {\n      dispatch(uiActions.showNotificartion({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed!\"\n      }));\n    });\n  }, [cart, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [notification && /*#__PURE__*/_jsxDEV(Notification, {\n      state: notification.status,\n      title: notification.title,\n      message: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [isOpenCart && /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"cj1aieFgzNlAbkAziZaQTFLCnFU=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/fumina/Documents/project/practice/react-udemy__02/redux-refresshers/src/App.js"],"names":["useEffect","Fragment","useSelector","useDispatch","Cart","Layout","Products","uiActions","Notification","App","dispatch","isOpenCart","state","ui","cart","notification","sendCartData","showNotificartion","status","title","message","response","fetch","method","body","JSON","stringify","ok","Error","catch","error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,UAAU,GAAGT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACC,EAAN,CAASF,UAArB,CAA9B;AACA,QAAMG,IAAI,GAAGZ,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACE,IAAlB,CAAxB;AACA,QAAMC,YAAY,GAAGb,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACC,EAAN,CAASE,YAArB,CAAhC,CAJa,CAKb;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,YAAY,GAAG,YAAY;AAC/BN,MAAAA,QAAQ,CACNH,SAAS,CAACU,iBAAV,CAA4B;AAC1BC,QAAAA,MAAM,EAAE,SADkB;AAE1BC,QAAAA,KAAK,EAAE,YAFmB;AAG1BC,QAAAA,OAAO,EAAE;AAHiB,OAA5B,CADM,CAAR;AAOA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAD0B,EAE1B;AACEC,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,IAAf;AAFR,OAF0B,CAA5B;;AAQA,UAAI,CAACO,QAAQ,CAACM,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAEDlB,MAAAA,QAAQ,CACNH,SAAS,CAACU,iBAAV,CAA4B;AAC1BC,QAAAA,MAAM,EAAE,SADkB;AAE1BC,QAAAA,KAAK,EAAE,UAFmB;AAG1BC,QAAAA,OAAO,EAAE;AAHiB,OAA5B,CADM,CAAR;AAOD,KA3BD;;AA6BAJ,IAAAA,YAAY,GAAGa,KAAf,CAAsBC,KAAD,IAAW;AAC9BpB,MAAAA,QAAQ,CACNH,SAAS,CAACU,iBAAV,CAA4B;AAC1BC,QAAAA,MAAM,EAAE,OADkB;AAE1BC,QAAAA,KAAK,EAAE,QAFmB;AAG1BC,QAAAA,OAAO,EAAE;AAHiB,OAA5B,CADM,CAAR;AAOD,KARD;AASD,GAvCQ,EAuCN,CAACN,IAAD,EAAOJ,QAAP,CAvCM,CAAT;AAyCA,sBACE,QAAC,QAAD;AAAA,eACGK,YAAY,iBACX,QAAC,YAAD;AACE,MAAA,KAAK,EAAEA,YAAY,CAACG,MADtB;AAEE,MAAA,KAAK,EAAEH,YAAY,CAACI,KAFtB;AAGE,MAAA,OAAO,EAAEJ,YAAY,CAACK;AAHxB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAQE,QAAC,MAAD;AAAA,iBACGT,UAAU,iBAAI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cADjB,eAEE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA9DQF,G;UACUN,W,EACED,W,EACNA,W,EACQA,W;;;KAJdO,G;AAgET,eAAeA,GAAf","sourcesContent":["import { useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport Cart from \"./components/Cart/Cart\";\nimport Layout from \"./components/Layout/Layout\";\nimport Products from \"./components/Shop/Products\";\nimport { uiActions } from \"./store/ui\";\nimport Notification from \"./components/UI/Notification\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isOpenCart = useSelector((state) => state.ui.isOpenCart);\n  const cart = useSelector((state) => state.cart);\n  const notification = useSelector((state) => state.ui.notification);\n  //every time app component render, the initial value will store the database, that would be problem because empty data will update all exsiting data every single time when app component render, so we need fix it\n  useEffect(() => {\n    const sendCartData = async () => {\n      dispatch(\n        uiActions.showNotificartion({\n          status: \"pending\",\n          title: \"Sending...\",\n          message: \"Sending cart data\",\n        })\n      );\n      const response = await fetch(\n        \"https://react-http-3be24-default-rtdb.firebaseio.com/cart.json\",\n        {\n          method: \"PUT\",\n          body: JSON.stringify(cart),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n\n      dispatch(\n        uiActions.showNotificartion({\n          status: \"success\",\n          title: \"Success!\",\n          message: \"Sending cart data successfully!\",\n        })\n      );\n    };\n\n    sendCartData().catch((error) => {\n      dispatch(\n        uiActions.showNotificartion({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed!\",\n        })\n      );\n    });\n  }, [cart, dispatch]);\n\n  return (\n    <Fragment>\n      {notification && (\n        <Notification\n          state={notification.status}\n          title={notification.title}\n          message={notification.message}\n        />\n      )}\n      <Layout>\n        {isOpenCart && <Cart />}\n        <Products />\n      </Layout>\n    </Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}