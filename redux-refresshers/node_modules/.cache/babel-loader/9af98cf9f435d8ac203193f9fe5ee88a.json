{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCartState = {\n  item: 0,\n  totalItems: 0,\n  isOpenCart: false\n}; // const CartSlice = createSlice({\n//   name: \"cart\",\n//   initialState: initialCartState,\n//   reducers: {\n//     itemIncrement(state) {\n//       state.item++;\n//       state.totalItems++;\n//     },\n//     itemDecrement(state) {\n//       state.item--;\n//       state.totalItems--;\n//     },\n//     addCart(state) {\n//       state.item++;\n//       state.totalItems++;\n//     },\n//     openCart(state) {\n//       state.isOpenCart = !state.isOpenCart;\n//     },\n//   },\n// });\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    isOpenCart: false\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload; //find()はテスト関数を満たす配列ないの最初の要素の値を返す\n\n      const existingItem = state.items.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        //普通のreduxではpushメソッドは使えない\n        //なぜならばpushメソッドは配列自体に変更を加えてしまうためであり、reduxはstateのコピーを変更する必要があるから\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      }\n    },\n\n    removeItemFromCart() {}\n\n  }\n});\nexport const cartAction = CartSlice.actions;\nexport default CartSlice.reducer;","map":{"version":3,"sources":["/Users/fumina/Documents/project/practice/react-udemy__02/redux-refresshers/src/store/cart.js"],"names":["createSlice","initialCartState","item","totalItems","isOpenCart","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","id","push","itemId","price","quantity","totalPrice","title","removeItemFromCart","cartAction","CartSlice","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,IAAI,EAAE,CADiB;AAEvBC,EAAAA,UAAU,EAAE,CAFW;AAGvBC,EAAAA,UAAU,EAAE;AAHW,CAAzB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE,CAFH;AAGZL,IAAAA,UAAU,EAAE;AAHA,GAFc;AAO5BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB,CAD2B,CAE3B;;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBf,IAAD,IAAUA,IAAI,CAACgB,EAAL,KAAYJ,OAAO,CAACI,EAA/C,CAArB;;AACA,UAAI,CAACF,YAAL,EAAmB;AACjB;AACA;AACAJ,QAAAA,KAAK,CAACJ,KAAN,CAAYW,IAAZ,CAAiB;AACfC,UAAAA,MAAM,EAAEN,OAAO,CAACI,EADD;AAEfG,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAET,OAAO,CAACO,KAJL;AAKff,UAAAA,IAAI,EAAEQ,OAAO,CAACU;AALC,SAAjB;AAOD;AACF,KAhBO;;AAiBRC,IAAAA,kBAAkB,GAAG,CAAE;;AAjBf;AAPkB,CAAD,CAA7B;AA2BA,OAAO,MAAMC,UAAU,GAAGC,SAAS,CAACC,OAA7B;AAEP,eAAeD,SAAS,CAACE,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialCartState = {\n  item: 0,\n  totalItems: 0,\n  isOpenCart: false,\n};\n\n// const CartSlice = createSlice({\n//   name: \"cart\",\n//   initialState: initialCartState,\n//   reducers: {\n//     itemIncrement(state) {\n//       state.item++;\n//       state.totalItems++;\n//     },\n//     itemDecrement(state) {\n//       state.item--;\n//       state.totalItems--;\n//     },\n//     addCart(state) {\n//       state.item++;\n//       state.totalItems++;\n//     },\n//     openCart(state) {\n//       state.isOpenCart = !state.isOpenCart;\n//     },\n//   },\n// });\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    isOpenCart: false,\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      //find()はテスト関数を満たす配列ないの最初の要素の値を返す\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n      if (!existingItem) {\n        //普通のreduxではpushメソッドは使えない\n        //なぜならばpushメソッドは配列自体に変更を加えてしまうためであり、reduxはstateのコピーを変更する必要があるから\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title,\n        });\n      }\n    },\n    removeItemFromCart() {},\n  },\n});\nexport const cartAction = CartSlice.actions;\n\nexport default CartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}