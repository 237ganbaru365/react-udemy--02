{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // const initialCartState = {\n//   item: 0,\n//   totalItems: 0,\n//   isOpenCart: false,\n// };\n// const CartSlice = createSlice({\n//   name: \"cart\",\n//   initialState: initialCartState,\n//   reducers: {\n//     itemIncrement(state) {\n//       state.item++;\n//       state.totalItems++;\n//     },\n//     itemDecrement(state) {\n//       state.item--;\n//       state.totalItems--;\n//     },\n//     addCart(state) {\n//       state.item++;\n//       state.totalItems++;\n//     },\n//     openCart(state) {\n//       state.isOpenCart = !state.isOpenCart;\n//     },\n//   },\n// });\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload; //find()はテスト関数を満たす配列ないの最初の要素の値を返す\n\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        //普通のreduxではpushメソッドは使えない\n        //なぜならばpushメソッドは配列自体に変更を加えてしまうためであり、reduxはstateのコピーを変更する必要があるから\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n}); //action custom creator はsliceの後に必ず記述する\n\nconst sendCartData = cartData => {\n  return dispatch => {\n    dispatch();\n  };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/fumina/Documents/project/practice/react-udemy__02/redux-refresshers/src/store/cart.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cartData","dispatch","cartActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE;AAFH,GAFc;AAM5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB,CAD2B,CAE3B;;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAI,CAACO,YAAL,EAAmB;AACjB;AACA;AACAJ,QAAAA,KAAK,CAACJ,KAAN,CAAYY,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADG;AAEfE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAET,OAAO,CAACO,KAJL;AAKff,UAAAA,IAAI,EAAEQ,OAAO,CAACU;AALC,SAAjB;AAOD,OAVD,MAUO;AACLR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BT,OAAO,CAACO,KAA5D;AACD;AACF,KApBO;;AAqBRI,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAIO,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAiC;AAC/BV,QAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYkB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACD,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACD;AACF;;AA/BO;AANkB,CAAD,CAA7B,C,CAyCA;;AACA,MAAMM,YAAY,GAAIC,QAAD,IAAc;AACjC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ;AACT,GAFD;AAGD,CAJD;;AAKA,OAAO,MAAMC,WAAW,GAAGzB,SAAS,CAAC0B,OAA9B;AAEP,eAAe1B,SAAS,CAAC2B,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// const initialCartState = {\n//   item: 0,\n//   totalItems: 0,\n//   isOpenCart: false,\n// };\n\n// const CartSlice = createSlice({\n//   name: \"cart\",\n//   initialState: initialCartState,\n//   reducers: {\n//     itemIncrement(state) {\n//       state.item++;\n//       state.totalItems++;\n//     },\n//     itemDecrement(state) {\n//       state.item--;\n//       state.totalItems--;\n//     },\n//     addCart(state) {\n//       state.item++;\n//       state.totalItems++;\n//     },\n//     openCart(state) {\n//       state.isOpenCart = !state.isOpenCart;\n//     },\n//   },\n// });\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      //find()はテスト関数を満たす配列ないの最初の要素の値を返す\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        //普通のreduxではpushメソッドは使えない\n        //なぜならばpushメソッドは配列自体に変更を加えてしまうためであり、reduxはstateのコピーを変更する必要があるから\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title,\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n  },\n});\n\n//action custom creator はsliceの後に必ず記述する\nconst sendCartData = (cartData) => {\n  return (dispatch) => {\n    dispatch();\n  };\n};\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}