{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nconst useHttp = applyData => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n  return {\n    // isLoading: isLoading,\n    // error: error,\n    // sendRequest: sendRequest,\n    //modern JavaScriptではプロパティと値が同じ名前の場合ひとつに省略して記載することも可能\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/fumina/Documents/project/practice/react-udemy__02/custom-hooks--02/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","applyData","isLoading","setIsLoading","error","setError","sendRequest","response","fetch","requestConfig","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAIC,SAAD,IAAe;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMQ,WAAW,GAAGP,WAAW,CAAC,YAAY;AAC1CI,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACC,aAAa,CAACC,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEF,aAAa,CAACE,MAAd,GAAuBF,aAAa,CAACE,MAArC,GAA8C,KADR;AAE9CC,QAAAA,OAAO,EAAEH,aAAa,CAACG,OAAd,GAAwBH,aAAa,CAACG,OAAtC,GAAgD,EAFX;AAG9CC,QAAAA,IAAI,EAAEJ,aAAa,CAACI,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeN,aAAa,CAACI,IAA7B,CAArB,GAA0D;AAHlB,OAApB,CAA5B;;AAMA,UAAI,CAACN,QAAQ,CAACS,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAnB;AAEAlB,MAAAA,SAAS,CAACiB,IAAD,CAAT;AACD,KAdD,CAcE,OAAOE,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GArB8B,EAqB5B,CAACM,aAAD,EAAgBR,SAAhB,CArB4B,CAA/B;AAuBA,SAAO;AACL;AACA;AACA;AACA;AACAC,IAAAA,SALK;AAMLE,IAAAA,KANK;AAOLE,IAAAA;AAPK,GAAP;AASD,CApCD;;GAAMN,O;;AAsCN,eAAeA,OAAf","sourcesContent":["import { useState, useCallback } from \"react\";\n\nconst useHttp = (applyData) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n\n  return {\n    // isLoading: isLoading,\n    // error: error,\n    // sendRequest: sendRequest,\n    //modern JavaScriptではプロパティと値が同じ名前の場合ひとつに省略して記載することも可能\n    isLoading,\n    error,\n    sendRequest,\n  };\n};\n\nexport default useHttp;\n"]},"metadata":{},"sourceType":"module"}